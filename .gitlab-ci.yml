image: gcc

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task

before_script:
  - apt-get update --yes
  - apt-get install --yes cmake

get-sonar-binaries:
  stage: .pre
  script:
    # Download sonar-scanner
    - curl -sSLo ./sonar-scanner-cli-4.2.0.1873-linux.zip 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip'
    - unzip -o sonar-scanner-cli-4.2.0.1873-linux.zip
    - mv sonar-scanner-4.2.0.1873-linux sonar-scanner
    # Download build-wrapper
    - curl -sSLo ./build-wrapper-linux-x86.zip "${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip"
    - unzip -oj build-wrapper-linux-x86.zip -d ./build-wrapper
    # Workaround to the bw haswell bug
    - cp build-wrapper/libinterceptor-x86_64.so build-wrapper/libinterceptor-haswell.so
  cache:
    policy: push
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - build-wrapper/
      - sonar-scanner/

build:
  stage: build
  script:
    - rm -rf build
    - mkdir build
    - cd build
    - cmake ..
    - cd ..
    # Run the build inside the build wrapper
    - build-wrapper/build-wrapper-linux-x86-64 --out-dir bw_output cmake --build build/ --config Release
  cache:
    policy: pull-push
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - build-wrapper/
      - sonar-scanner/
      - bw_output/
      - build/

sonarcloud-check:
  stage: .post
  cache:
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - build-wrapper/
      - sonar-scanner/
      - bw_output/
      - build/
  script:
    - sonar-scanner/bin/sonar-scanner -X -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}" -Dsonar.cfamily.build-wrapper-output=bw_output
  only:
    - merge_requests
    - master
    - develop
